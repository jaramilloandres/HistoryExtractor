using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml.Linq;
using System.Linq;
using System.IO;
using System.Net.Http;
using System.Net;




namespace historyextractor
{
    class Program
    {
       
        public static void Main()
        {
            Console.WriteLine("Busqueda de Dispositivos");
            SearchDevices();
            IgnoreBadCertificates();
            GetApi(5180);

        }


        public const string CONNECTION_STRING = "Data Source=DATABASE;Initial Catalog=dbo;User Id=sa;Password=**Password**";
        public static  List<int> SearchDevices()
        {
            List<int> devices = new List<int>();
            using (var cnn = new SqlConnection(CONNECTION_STRING))
            {
                cnn.Open();
                var command = new SqlCommand($@" select ID from Device", cnn);
                using (var dr = command.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        devices.Add(Convert.ToInt32(dr["ID"]));  
                    }
                }
                return  devices;
            }   
        }

        private static void GetApi(int devices)
        {
            string usr = "usr";
            string pssd = "*pass*";
            int id = devices;
            string indate;
            string endate;

            Console.WriteLine("Ingrese la fecha inicial en el formato AAAA-MM-DD: ");
            indate = Console.ReadLine();

            Console.WriteLine("Ingrese la fecha final en el formato AAAA-MM-DD: ");
            endate = Console.ReadLine();

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://url.com.co/api/");
                var response = client.GetAsync("historicdataupt.xml?username=" + usr + "&password=" + pssd + "&id=" + id + "&sdate=" + indate + "-00-00-00&edate=" + endate + "-00-00-00&avg=86400&pctavg=300&pctshow=false&pct=95&pctmode=true");
                var result = response.Result.Content.ReadAsStringAsync();
                result.Wait();

                XElement XTemp = XElement.Parse(result.Result);
                var queryCDATAXML = from element in XTemp.DescendantNodes()
                                    where element.NodeType == System.Xml.XmlNodeType.CDATA
                                    select element.Parent.Value.Trim();
                string BodyHtml = queryCDATAXML.ToList<string>()[0].ToString();
            }
        }

        public static void IgnoreBadCertificates()
        {
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            ServicePointManager.ServerCertificateValidationCallback +=
                (sender, cert, chain, sslPolicyErrors) => { return true; };
        }

    }

    public class uptpercent
    {
        public int uptimepercent { get; set; }
        public string downtime { get; set; }
    }
}
